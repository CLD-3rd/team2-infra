apiVersion: v1
kind: Namespace
metadata:
  name: karpenter
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: karpenter
  namespace: karpenter
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::061039804626:role/savemypodo-cluster-karpenter
---
apiVersion: karpenter.sh/v1beta1
kind: NodePool
metadata:
  name: default
spec:
  template:
    metadata:
      labels:
        savemypodo.com/cluster: savemypodo-cluster
    spec:
      requirements:
        - key: kubernetes.io/arch
          operator: In
          values: ["amd64"]
        - key: kubernetes.io/os
          operator: In
          values: ["linux"]
        - key: karpenter.sh/capacity-type
          operator: In
          values: ["spot", "on-demand"]
        - key: node.kubernetes.io/instance-type
          operator: In
          values: ["t3.medium", "t3.large", "t3.xlarge"]
      nodeClassRef:
        apiVersion: karpenter.k8s.aws/v1beta1
        kind: EC2NodeClass
        name: default
  limits:
    cpu: 1000
  disruption:
    consolidationPolicy: WhenEmpty
    consolidateAfter: 30s
---
apiVersion: karpenter.k8s.aws/v1beta1
kind: EC2NodeClass
metadata:
  name: default
spec:
  amiFamily: AL2
  role: arn:aws:iam::061039804626:role/savemypodo-cluster-node-role
  subnetSelectorTerms:
    - tags:
        karpenter.sh/discovery: savemypodo-cluster
  securityGroupSelectorTerms:
    - tags:
        karpenter.sh/discovery: savemypodo-cluster
  userData: |
    #!/bin/bash
    /etc/eks/bootstrap.sh savemypodo-cluster
    yum install -y links tree jq tcpdump sysstat htop iotop
